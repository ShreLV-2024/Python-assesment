# -*- coding: utf-8 -*-
"""LVADSUSR116-shreyas-IA2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lwdirfB71ks2MNNoJQ-tUYMnHNoU04Yq
"""

import numpy as np
import pandas as pd
import seaborn as sns

# Qn1
rgb_image = np.array([[[255,0,0], [00,255,0], [0,0,255]],
                      [[255,255,0], [255,0,255],[0,255,255]],
                      [[127,127,127],[200,200,200],[50,50,50]]])

rgb_image



grayscale_1 = np.zeros(9)

grayscale_1 = grayscale_1.reshape(3,3)
grayscale_1

for i in range(len(rgb_image[0])):
    for j in range
    grayscale_1[0] = 0.2989*rgb_image[0][][i]

rgb_image[0][0]









# Qn 2
# Doing this for a 3*3 matrix
def normalize(a):
    b = np.zeros(9).reshape(3,3)
    for i in range(len(a)):
        for j in range(len(a[i])):
           b[i][j] = (a[i][j] - a[i].mean())/(a[i].std())

    return b

a = np.array([[150,165,175],[65,75,85],[25,32,31]]) # first represnts height, second represnts weight and third represnets age
normalize(a)



# Qn3 - doing this for a 3*3*3 array
c =  np.array([[[255,0,0], [00,255,0], [0,0,255]],
              [[255,255,0], [255,0,255],[0,255,255]],
              [[127,127,127],[200,200,200],[50,50,50]]])

c

d = np.zeros(27).reshape(3,9)
d

for i in range(len(c)):
    d[i] = c[i].ravel()

e = d.flatten()

e.reshape(3,9) # this is the answer - every row is the resepctive sensor's data



# Qn4:
#doing it for 3 players

f = np.array([[45,55,65], [72,75,65],[38,65,58]])

f # each row is 1 player

dictionary_1 = {'Player0': [], 'Player1':[], 'Player2':[]}

for i in range(len(f)):
    for j in range(0,len(f[i]),2):
        dictionary_1[f'Player{i}'].append(f[i][j]) # numpy indexing

dictionary_1 # first and last games' scores



# Qn 5
data = np.array([[63,61,52,61,66],
 [70,51, 54, 75, 59],
 [60,-1, 77, 34, 89],
 [54,73, 78, -1, 87],
 [93,70, 86, 89, 63]])

three_sub = data[:, -3:]
valid_scores = np.where(three_sub != -1, three_sub, 0)
sum_valid_scores = np.sum(valid_scores, axis=1)
count_valid_scores = np.count_nonzero(valid_scores, axis=1)
count_valid_scores[count_valid_scores == 0] = 1
average_scores = sum_valid_scores / count_valid_scores
print("Average scores",average_scores)











# qn6
def apply_adjustment_factors(city_temperatures, adjustment_factors):

    adjusted_factors = adjustment_factors.reshape(1, -1)
    adjusted_temperatures = city_temperatures * adjusted_factors

    return adjusted_temperatures
city_temperatures = np.array([
    [22, 25, 30, 28],
    [10, 18, 24, 25],
    [10, 12, 12, 18]
])
adjustment_factors = np.array([0.91, 0.98, 1.01, 1.032])

adjusted_temperatures = apply_adjustment_factors(city_temperatures, adjustment_factors)

print('City Temperature:',city_temperatures)
print('Adjusted Temperature',adjusted_temperatures)



# Qn7
data = {'Name': ['Alice','Bob','Charlie','David','Eve','Frank','Grace'],
        'Age':[25,30,35,40,45,50,55],
        'City':['New York','Los Angeles','Chicago','Houston','Phoenix','Miami','Boston'],
        'Department':['HR','IT','Finance','Marketing','Sales','IT','HR']}

df1 = pd.DataFrame(data)

df1

# Answer
df1[['Name','City']][(df1['Age'] < 45) & (df1['Department'] == 'HR')]





# qn 8
data = {'Product':['Apples','Bananas','Cherries','Dates','Elderberries','Flour','Grapes'],
        'Category':['Fruit','Fruit','Fruit','Fruit','Fruit','Bakery','Fruit'],
        'Price':[1.2,0.5,3.0,2.5,4.0,1.5,2],
        'Promotion':[True,False,True,True,False,True,False]}

df2 = pd.DataFrame(data)

df2

df3 = df2[df2['Category'] == 'Fruit']

# Answer
df3[(df3['Price'] > df3['Price'].mean()) & (df3['Promotion'] == False)]



# qn 9
Employee_data = {'Employee':['Alice','Bob','Charlie','David'],
                 'Department':['HR','IT','Finance','IT'],
                 'Manager':['John','Rachel','Emily','Rachel']}

Project_data = {'Employee':['Alice','Charlie','Eve'],
                'Project':['P1','P3','P2']}

df6 = pd.DataFrame(Employee_data)
df7 = pd.DataFrame(Project_data)

# Answer
pd.merge(df6,df7,on = 'Employee',how = 'left')
# So here only project p1 and p3 are mapped to managers john and emily





# q10
data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)

dep_sales = df.groupby('Department')['Sales'].sum()

dep_counts = df['Department'].value_counts()
average_sales_per_salesperson = dep_sales / dep_counts

ranked_departments = average_sales_per_salesperson.sort_values(ascending=False)

print("Average Sales per Salesperson in Each Department:",average_sales_per_salesperson)
print("Ranked Departments based on Average Sales per Salesperson:",ranked_departments)

